@startuml
package TSimpleServer {
    start
    :单工作线程\n     开始;
    note left
        循环监听新请求并
        完成对请求的处理
        阻塞IO，一次只能
        接收和处理一个
        socket连接
    end note
    :启动**监听socket**;
    while (停止工作？) is (\n否)
        :accept一个业务socket;
        :完成业务socket的RPC调用请求;
    endwhile (是   )
    -[dotted]->
    :结束;
    end
}
package TNonblockingServer {
    start
    :单工作线程\n     开始;
    :注册**监听socket**到**selector**;
    note left
        所有socket都注册到selector
    end note
    while (停止工作？) is (\n否)
        :selector循环监控是否有已就绪socket;
        note left
            IO多路复用，采用非阻塞IO
            同时监控多个socket的状态变化
            但依然是单线程
        end note
        while (就绪socket已处理完？) is (\n否)
            :取出一个就绪socket;
            if (就绪socket需要accept？) then (\n是)
                :accept新socket并将其注册到selector;

            elseif (就绪socket需要读取数据？) then (\n是)
                :1.完成数据读取\n2.完成业务处理;
            elseif (就绪socket需要写入数据？) then (\n是)
                :完成数据写入操作;
            else (否)
            :输出一条错误log;
            endif
        endwhile (是)
        -[dotted]->
    endwhile (是)
    -[dotted]->
    :结束;
    end
}
package THsHaServer {
    start
    :单工作线程\n     开始;
    note left
        是TNnoblockingServer的子类
        依然是单线程完成所有socket监听与数据读写
        但引入一个线程池专门进行业务处理
    end note
    :注册**监听socket**到**selector**;
    note left
        所有socket都注册到selector
    end note
    while (停止工作？) is (\n否)
            :selector循环监控是否有已就绪socket;
            note left
                IO多路复用，采用非阻塞IO
                同时监控多个socket的状态变化
                但依然是单线程
            end note
            while (就绪socket已处理完？) is (\n否)
                :取出一个就绪socket;
                if (就绪socket需要accept？) then (\n是)
                    :accept新socket并将其注册到selector;
                elseif (就绪socket需要读取数据？) then (\n是)
                    :1.完成数据读取;
                    :2.交由任务线程池完成业务处理\n即根据函数名和参数调用Thrift函数;
                elseif (就绪socket需要写入数据？) then (\n是)
                    :完成数据写入操作;
                else (否)
                    :输出一条错误log;
                endif
            endwhile (是)
            -[dotted]->
    endwhile (是)
    -[dotted]->
    :结束;
    end
}
package TThreadPoolServer {
    partition 主线程 {
        start
        :单工作线程\n    开始;
        :启动**监听socket**;
        while (停止工作？) is (\n否)
            :accept一个业务socket;
            :将新业务socket封装成一个任务交给线程池;
            fork
                :业务线程池;
                detach
            endfork
        endwhile (是)
        -[dotted]->
        :结束;
        end
    }
    partition 业务线程池 {
        :业务socket任务;
        :从业务socket中读取调用请求;
        :调用具体函数完成处理;
        :将调用结果返回客户端;
        kill
    }
    note left
        数据读取和业务处理都交由线程池完成
        主线程只负责监听新socket连接
        新连接能够及时接受
        但同时处理能力受限于线程池的能力
    end note
}
package TThreadedSelectorServer {
    start
    :**监听socket**;
    -> 新socket连接;
    :AcceptThread;
    note left
        专门用于处理新连接
    end note
    :SelectorThreadLoadBalancer;
    note left
        负载均衡器对象
        当AcceptThread接受新socket连接时
        由它决定将新请求分配给哪个SelectorThread
    end note
    note left
        多个SelectorThread对象
        专门处理业务socket
        的网络I/O操作
    end note
    split
        :SelectorThread-0;
    split again
        :SelectorThread-1;
    split again
        :...;
    split again
        :SelectorThread-N;
    end split
    -> 读取业务socket的数据之后
    交给业务线程池处理;
    :ExecutorService业务处理线程池;
    note left
        SelectorThread线程监听到socket中
        有调用请求过来时，读取请求之后
        交给ExecutorService线程池中
        的线程来完成此次调用的具体执行
    end note
}
@enduml